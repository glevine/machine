#!/bin/bash

# This script has been modeled after https://github.com/thoughtbot/laptop.

# Run via:
# $ bash -c "$(curl -fsSL -H 'Cache-Control: non-cache' https://raw.github.com/glevine/machine/master/machine.mango)" 2>&1 | tee ~/.machine.mango.log

append_to_file() {
    local file="$1"
    local text="$2"
    local skip_new_line="${3:-0}"

    if [ ! -f "$file" ]; then
        touch "$file"

        # No need to add a new line if the file is brand new.
        skip_new_line=1
    fi

    if ! grep -Fqs "^$text$" "$file"; then
        if [ "$skip_new_line" -eq 1 ]; then
            printf "%s\\n" "$text" >>"$file"
        else
            printf "\\n%s\\n" "$text" >>"$file"
        fi
    fi
}

add_to_path() {
    local text="$1"

    # Assumes a comment precedes this line.
    append_to_file "$HOME/.localrc" "export PATH=\"$text:\$PATH\"" 1

    export PATH="$1:$PATH"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

cat <<EOF
Hi, $USER.
Let's bootstrap your macOS machine for sugarcrm/Mango development.

EOF

# Start at home.
cd "$HOME"

# Homebrew is the source of so much.
if ! command -v brew >/dev/null; then
    curl -fsSL -H "Cache-Control: non-cache" "https://raw.githubusercontent.com/Homebrew/install/master/install" | ruby
    append_to_file "$HOME/.localrc" "# Recommended by brew doctor."
    add_to_path "/usr/local/bin"
    add_to_path "/usr/local/sbin"
else
    brew update
fi

brew bundle --file=- <<EOF
brew "composer"
brew "git"
brew "php-code-sniffer"
brew "phpmd"
brew "vagrant-completion"
brew "yarn"

cask "docker"
cask "vagrant"
cask "vagrant-manager"
cask "virtualbox"

tap "sugarcrm/devops", "git@github.com:sugarcrm/homebrew-devops.git"
brew "build-monitor"
EOF

# Grab the multiverse source code.
if [ ! -d "$HOME/sugarcrm/" ]; then
    mkdir "$HOME/sugarcrm"
fi

if [ ! -d "$HOME/sugarcrm/Mango" ]; then
    (
        cd "$HOME/sugarcrm"
        git clone --recursive -o upstream git@github.com:sugarcrm/Mango.git
        cd Mango
        git remote add origin "git@github.com:$USER/Mango.git"
        git submodule init
        git submodule update
        cd sugarcrm
        composer install
        cd sidecar
        git remote add origin "git@github.com:$USER/sidecar.git"
    )
fi

if [ -f "$HOME/sugarcrm/Mango/.git/hooks/post-merge" ]; then
    curl -fsSL -H "Cache-Control: non-cache" https://raw.github.com/glevine/machine/master/mango/post-merge -o "$HOME/sugarcrm/Mango/.git/hooks/post-merge"
    chmod +x "$HOME/sugarcrm/Mango/.git/hooks/post-merge"
fi

if [ -f "$HOME/sugarcrm/Mango/.git/hooks/post-rebase" ]; then
    curl -fsSL -H "Cache-Control: non-cache" https://raw.github.com/glevine/machine/master/mango/post-rebase -o "$HOME/sugarcrm/Mango/.git/hooks/post-rebase"
    chmod +x "$HOME/sugarcrm/Mango/.git/hooks/post-rebase"
fi

if [ -f "$HOME/sugarcrm/Mango/.git/hooks/post-checkout" ]; then
    curl -fsSL -H "Cache-Control: non-cache" https://raw.github.com/glevine/machine/master/mango/post-checkout -o "$HOME/sugarcrm/Mango/.git/hooks/post-checkout"
    chmod +x "$HOME/sugarcrm/Mango/.git/hooks/post-checkout"
fi

if [ -f "$HOME/sugarcrm/Mango/.git/hooks/pre-commit" ]; then
    curl -fsSL -H "Cache-Control: non-cache" https://raw.github.com/glevine/machine/master/mango/pre-commit -o "$HOME/sugarcrm/Mango/.git/hooks/pre-commit"
    chmod +x "$HOME/sugarcrm/Mango/.git/hooks/pre-commit"
fi

# source: https://github.com/alias-mac/dotfiles/blob/master/bin/git-psr2
curl -fsSL -H "Cache-Control: non-cache" https://raw.githubusercontent.com/alias-mac/dotfiles/master/bin/git-psr2 -o /usr/local/bin/git-psr2
chmod +x /usr/local/bin/git-psr2

# Use asdf for managing language & runtime versions.
brew bundle --file=- <<EOF
brew "asdf"
brew "autoconf"
brew "automake"
brew "coreutils"
brew "gpg"
brew "libtool"
brew "libxslt"
brew "libyaml"
brew "openssl"
brew "readline"
brew "unixodbc"
EOF

append_to_file "$HOME/.localrc" "# Add asdf."
append_to_file "$HOME/.localrc" "source \$HOME/.asdf/asdf.sh" 1
append_to_file "$HOME/.localrc" "source \$HOME/.asdf/completions/asdf.bash" 1

# Install Node.js.
if ! asdf plugin-list | grep -Fq "nodejs"; then
    asdf plugin-add nodejs
    bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
else
    asdf plugin-update nodejs
fi

# Sidecar requires a Node.js >= 8.9.2. Seedbed requires 8.x. Sidecar docs require 6.x.
asdf install nodejs 8.9.4
asdf global nodejs 8.9.4

# Use rome to build Mango.
# source: https://github.com/jwhitcraft/rome
if ! command -v rome >/dev/null; then
    curl -fsSL -H "Cache-Control: non-cache" "http://h2ik.co/rome/rome-$(uname -s)-$(uname -m)" -o /usr/local/bin/rome
    chmod +x /usr/local/bin/rome

    if [ ! -d "$HOME/sugarcrm/www/" ]; then
        mkdir "$HOME/sugarcrm/www"
    fi

    rome self-update
fi

# Add a build-monitor configuration.
if [ -f "$HOME/.build_monitor.yaml" ]; then
    curl -fsSL -H "Cache-Control: non-cache" https://raw.github.com/glevine/machine/master/mango/.build_monitor.yaml -o "$HOME/.build_monitor.yaml"
fi

if [ ! -d "$HOME/sugarcrm/stacks" ]; then
    (
        cd "$HOME/sugarcrm"
        git clone --recursive -o upstream git@github.com:sugarcrm/stacks.git
        cd stacks
        git remote add origin "git@github.com:$USER/stacks.git"
        sudo bash ./prereq.sh
    )

    vagrant plugin install vagrant-cachier
    vagrant plugin install vagrant-vbguest
    chown -R "$USER:staff" "$HOME/.vagrant.d"
fi

# srome wraps rome to build Mango in a dev stack.
if ! command -v srome >/dev/null; then
    curl -fsSL -H "Cache-Control: non-cache" https://raw.github.com/glevine/machine/master/mango/srome -o /usr/local/bin/srome
    chmod +x /usr/local/bin/srome
fi

brew doctor

cat <<EOF

That's a wrap! Let me give you a summary of some important things you should know.

The source code has been installed to $HOME/sugarcrm/Mango. Note that upstream is named upstream and your fork is named origin.
Some useful Git hooks were placed in $HOME/sugarcrm/Mango/.git/hooks.
Use \`git psr2\` to check staged code for PSR-2 compliance.

All shell customizations can be found in $HOME/.localrc. If it's not already, make sure you add the following to $HOME/.bashrc, $HOME/.bash_profile, $HOME/.zshrc, or whatever file you use.

source \$HOME/.localrc

asdf is used for managing language and runtime versions. Learn how to manage these at https://asdf-vm.com/#/core-commands.
Sidecar requires a Node.js >= 8.9.2. Seedbed requires 8.x. Sidecar docs require 6.x. Node.js was set to 8.9.4.

The dev stacks have been installed to $HOME/sugarcrm/stacks. Note that upstream is named upstream and your fork is named origin.

You may use rome to build Mango. See the docs at https://github.com/jwhitcraft/rome/blob/master/docs/rome.md.
srome wraps rome to build Mango in a dev stack.

\$ cd $HOME/sugarcrm/stacks/php73-mysql57
\$ srome -f ult -v 9.1.0.0

build-monitor can watch for source code changes and recompile files. The configuration, which you might need to tailor to your liking, can be found at $HOME/.build_monitor.yaml.

\$ cd $HOME
\$ build-monitor -w ~/Mango

After building Mango in a dev stack, you can reach it at http://localhost:8080.
Use localhost:9900 for remote debugging.
Connect to the MySQL server using \`mysql -u sugar -psugar -h 127.0.0.1 -P 8306\`.
Install the elasticsearch head plugin at https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm. Use localhost:8954.

If you used the prescribed bootstrapping method, then the output of all of these commands was redirected to $HOME/.machine.mango.log.
Carefully read through the output to determine if you need to perform any additional steps, like following Homebrew caveats.

EOF
