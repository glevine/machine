#!/bin/bash

# This script has been modeled after https://github.com/thoughtbot/laptop.

# Run via:
# $ bash -c "$(curl -fsSL -H 'Cache-Control: non-cache' https://raw.github.com/glevine/machine/master/machine.me)" 2>&1 | tee ~/.machine.me.log

append_to_file() {
    local file="$1"
    local text="$2"
    local skip_new_line="${3:-0}"

    if [ ! -f "$file" ]; then
        touch "$file"

        # No need to add a new line if the file is brand new.
        skip_new_line=1
    fi

    if ! grep -Fqs "^$text$" "$file"; then
        if [ "$skip_new_line" -eq 1 ]; then
            printf "%s\\n" "$text" >>"$file"
        else
            printf "\\n%s\\n" "$text" >>"$file"
        fi
    fi
}

add_to_path() {
    local text="$1"

    # Assumes a comment precedes this line.
    append_to_file "$HOME/.localrc" "export PATH=\"$text:\$PATH\"" 1

    export PATH="$1:$PATH"
}

wait_for_user() {
    read -n 1 -s -r -p "Press any key to continue..."
}

github_ssh_key() {
    echo "Following https://help.github.com/en/articles/connecting-to-github-with-ssh to connect to Github with SSH ..."

    ssh-keygen -t rsa -b 4096
    eval "$(ssh-agent -s)"

    append_to_file "$HOME/.ssh/config" "Host *"
    append_to_file "$HOME/.ssh/config" "  AddKeysToAgent yes" 1
    append_to_file "$HOME/.ssh/config" "  UseKeychain yes" 1
    append_to_file "$HOME/.ssh/config" "  IdentityFile ~/.ssh/id_rsa" 1

    ssh-add -K "$HOME/.ssh/id_rsa"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

cat <<EOF
Hi, $USER.
Let's bootstrap your macOS machine.
Before we get started, sign into the App Store. You should also take this time to optionally sign into iCloud.
Go ahead. I'll wait for you.
EOF
wait_for_user

echo "It is recommended that you update all of your software in the App Store and upgrade macOS if available. You can re-run this script when you are ready. Do you want to continue? (y/n)?"
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$(while ! head -c 1 | grep -i '[ny]'; do true; done)
stty "$old_stty_cfg"
if echo "$answer" | grep -iq "^n"; then
    echo "Come back when you're done."
    exit 0
fi

# Start at home.
cd "$HOME"

# Going dark.
# source: https://brettterpstra.com/2018/09/26/shell-tricks-toggling-dark-mode-from-terminal/
osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to true'

# Github SSH key.
if [ -f "$HOME/.ssh/id_rsa" ]; then
    echo "It looks like you already have an SSH key. Do you need to generate a new one? (y/n)?"
    old_stty_cfg=$(stty -g)
    stty raw -echo
    answer=$(while ! head -c 1 | grep -i '[ny]'; do true; done)
    stty "$old_stty_cfg"
    if echo "$answer" | grep -iq "^y"; then
        github_ssh_key
    fi
else
    github_ssh_key
fi

pbcopy <"$HOME/.ssh/id_rsa.pub"
echo "Your SSH key was copied to your clipboard. If needed, go to https://github.com/settings/ssh/new to add your SSH key to Github. I'll wait for you."
wait_for_user

# Homebrew is the source of so much.
if ! command -v brew >/dev/null; then
    curl -fsSL -H "Cache-Control: non-cache" "https://raw.githubusercontent.com/Homebrew/install/master/install" | ruby
    append_to_file "$HOME/.localrc" "# Recommended by brew doctor."
    add_to_path "/usr/local/bin"
else
    brew update
fi

# Can't live without zsh.
if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ]; then
    # Get the latest zsh.
    brew install zsh

    # Make zsh the default shell.
    sudo dscl . -create "/Users/$USER" UserShell /usr/local/bin/zsh

    # Better yet, oh my zsh!
    curl -fsSL -H "Cache-Control: non-cache" "https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh" | sh

    # zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"

    # zsh-completions
    git clone https://github.com/zsh-users/zsh-completions "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions"

    # zsh-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting"

    append_to_file "$HOME/.localrc" "# oh-my-zsh plugins"
    append_to_file "$HOME/.localrc" "# zsh-syntax-highlighting must be last" 1
    append_to_file "$HOME/.localrc" "# Others worth considering: git-prompt, jump (Does it overlap with autojump?), kubectrl, minikube, per-directory-history (Does it overlap with dirhistory or history?), pj (Does it overlap with autojump?), thefuck (Conflicts with sudo.), vagrant-prompt, z (Does it overlap with autojump?), zsh-navigation-tools" 1
    append_to_file "$HOME/.localrc" "plugins=(asdf autojump colored-man-pages command-not-found common-aliases compleat copybuffer copydir copyfile cp dirhistory dirpersist docker docker-compose dotenv extract git golang heroku history iwhois last-working-dir lol man npm osx perms sublime sudo themes timer tmux urltools vagrant vault web-search yarn wd zsh_reload zsh-history-substring-search zsh-autosuggestions zsh-completions zsh-syntax-highlighting)" 1

    append_to_file "$HOME/.localrc" "# Search history with arrow keys. Learn how to search your command history at https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys."
    append_to_file "$HOME/.localrc" "autoload -U up-line-or-beginning-search" 1
    append_to_file "$HOME/.localrc" "autoload -U down-line-or-beginning-search" 1
    append_to_file "$HOME/.localrc" "zle -N up-line-or-beginning-search" 1
    append_to_file "$HOME/.localrc" "zle -N down-line-or-beginning-search" 1
    append_to_file "$HOME/.localrc" "bindkey \"^[[A\" up-line-or-beginning-search # Up" 1
    append_to_file "$HOME/.localrc" "bindkey \"^[[B\" down-line-or-beginning-search # Down" 1

    # Add ~/.localrc to ~/.zshrc.
    append_to_file "$HOME/.zshrc" "# $HOME/.localrc is where all of the customizations are."
    append_to_file "$HOME/.zshrc" "source \$HOME/.localrc" 1
fi

# Let's have a round of the usual brews.
brew bundle --file=- <<EOF
tap "homebrew/cask-drivers"
tap "homebrew/command-not-found"

brew "ack"
brew "base64"
brew "cheat"
brew "coreutils"
brew "dateutils"
brew "ffind"
brew "gist"
brew "git"
brew "grc"
brew "grep"
brew "handbrake"
brew "jq"
brew "openssl"
brew "osxutils"
brew "parallel"
brew "reattach-to-user-namespace"
brew "rename"
brew "shellcheck"
brew "the_silver_searcher"
brew "tmux"
brew "vagrant-completion"
brew "vim"
brew "wget"
brew "yarn"

cask "amazon-photos"
cask "anki"
cask "appcleaner"
cask "docker"
cask "dropbox"
cask "firefox"
cask "gimp"
cask "google-chrome"
cask "gpg-suite"
cask "grammarly"
cask "logitech-myharmony"
cask "netspot"
cask "ngrok"
cask "onedrive"
cask "plex-media-player"
cask "postman"
cask "sourcetree"
cask "sublime-text"
cask "vagrant"
cask "vagrant-manager"
cask "virtualbox"
cask "visual-studio-code"
cask "vlc"

mas "amphetamine", id: 937984704
mas "evernote", id: 406056744
mas "slack", id: 803453959

# osxfuse must be installed before ntfs-3g.
cask "osxfuse"
brew "ntfs-3g"
EOF

# Configuration tmux.
# source: https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/blob/master/Usage.md#basic-configuration
append_to_file "$HOME/.tmux.conf" "set-option -g default-command \"reattach-to-user-namespace -l zsh\""

# Configure Git.
echo "Let's configure Git ..."

append_to_file "$HOME/.localrc" "# Use \`code\` to launch Visual Studio Code. Allows VS Code to be used as the Git editor."
add_to_path "/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

read -r -p "What is your Git author name? " username
git config --global user.name "$username"
read -r -p "What is your Git email address? " email
git config --global user.email "$email"
git config --global credential.helper osxkeychain
git config --global alias.amend "commit --amend"
git config --global alias.b branch
git config --global alias.co checkout
git config --global alias.cob "checkout -b"
git config --global alias.cp "cherry-pick"
git config --global alias.r "remote -v"
git config --global alias.ra "remote add"
git config --global alias.rb "rebase -i"
git config --global alias.smi "submodule init"
git config --global alias.smu "submodule update"
git config --global alias.st status
git config --global alias.unstage "reset --soft HEAD^"
git config --global core.autocrlf input
git config --global core.editor "code --wait"
git config --global core.whitespace -blank-at-eof,tab-in-indent
git config --global diff.tool vscode
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
git config --global difftool.prompt false
git config --global help.autocorrect 1
git config --global mergetool.keepBackup false
git config --global push.default simple

# Always ignore these files.
git config --global core.excludesfile ~/.gitignore
append_to_file "$HOME/.gitignore" "*~"
append_to_file "$HOME/.gitignore" ".*.swp" 1
append_to_file "$HOME/.gitignore" ".DS_Store" 1

echo "Sign into gist ..."
gist --login

# Use asdf for managing language & runtime versions.
brew bundle --file=- <<EOF
brew "asdf"
brew "autoconf"
brew "automake"
brew "coreutils"
brew "gpg"
brew "libtool"
brew "libxslt"
brew "libyaml"
brew "openssl"
brew "readline"
brew "unixodbc"
EOF

append_to_file "$HOME/.localrc" "# Add asdf."
append_to_file "$HOME/.localrc" "source \$HOME/.asdf/asdf.sh" 1
append_to_file "$HOME/.localrc" "source \$HOME/.asdf/completions/asdf.bash" 1

# Install Node.js.
if ! asdf plugin-list | grep -Fq "nodejs"; then
    asdf plugin-add nodejs
    bash "$(brew --prefix)/opt/asdf/plugins/nodejs/bin/import-release-team-keyring"

    # Don't change the Node.js version unless installing in case the version needs to be pinned, like for Mango.
    asdf install nodejs 11.13.0
    asdf global nodejs 11.13.0
else
    asdf plugin-update nodejs
fi

# shellcheck source=/dev/null
source "$HOME/.zshrc"

cat <<EOF

And I'm spent! Let me give you a summary of some important things you should know.

All shell customizations can be found in $HOME/.localrc. $HOME/.localrc is sourced in $HOME/.zshrc.

Your Git configurations live at $HOME/.gitconfig.

asdf is used for managing language and runtime versions. Learn how to manage these at https://asdf-vm.com/#/core-commands.

Writing to NTFS drives is a must. The instructions can be found at https://github.com/osxfuse/osxfuse/wiki/NTFS-3G. The software has already been installed, but some manual steps are required to auto-mount NTFS volumes in read-write mode.

To replace /sbin/mount_ntfs with the version provided by NTFS-3G you will need to reboot your Mac in recovery mode before proceeding. See https://support.apple.com/en-us/HT201314 for details on how to start the recovery system. Once in recovery mode open a new Terminal window from the Utilities menu and enter the following commands:

\$ sudo mv "/Volumes/Macintosh HD/sbin/mount_ntfs" "/Volumes/Macintosh HD/sbin/mount_ntfs.orig"
\$ sudo ln -s /usr/local/sbin/mount_ntfs "/Volumes/Macintosh HD/sbin/mount_ntfs"

If you used the prescribed bootstrapping method, then the output of all of these commands was redirected to $HOME/.machine.me.log.
Carefully read through the output to determine if you need to perform any additional steps, like following Homebrew caveats. I tried to follow any that I could, but I might have missed something that is important for you.
EOF

# Unhandled caveats:
#    openssl
